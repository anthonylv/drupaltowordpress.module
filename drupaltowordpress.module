<?php

/**********
 * Define help text
 */
function drupaltowordpress_help($path, $arg) {
	$output = '';
	switch ($path) {
	case "admin/help#drupaltowordpress":
		$output = '<p>'.  t("Displays Drupal to Wordpress analysis") .'</p>';
		break;
	}
	  return $output;
}


/**********
 * Define valid permissions
 */
function drupaltowordpress_perm() {
	return array('access drupaltowordpress content');
}


/**********
 * Create a block containing the menu for this module
 */
function drupaltowordpress_block($op = 'list', $delta = 0, $edit = array()) {  

	// set up an empty array which will contain the block contents
	$block = array();

 	switch ($op) {
    	case "list":
      	// Generate listing of blocks from this module, for the admin/block page
      	$block[0]["info"] = t('Drupal to WordPress');
      	break;

    	case "view":
		// Generate our block content
		$block_content .= "<ul><li>".l("Results", "d2w/results")."</li>";
		$block_content .= "<li>".l("Duplicate terms", "d2w/duplicate_terms")."</li>";
		$block_content .= "<li>".l("Charlength exceeded terms", "d2w/charlength_exceeded")."</li>";
		$block_content .= "</ul>";

        //Setup the block        
        $block["subject"] = t("Drupal to WordPress");

        //Check that content isn't empty
        if ($block_content == "") {
            $block_content = t("Sorry, no content to display.");            
        }
        $block["content"] = $block_content;
      	break;

    	case "save":
      	break;

    	case "configure":
      	break;
  	}

 	return $block;
}


/**********
 * 
 */
function drupaltowordpress_menu() {
	$items = array();

	$items['admin/settings/drupaltowordpress'] = array(
	  'title' => 'Drupal to WordPress module settings',
	  'description' => 'Description of your Drupal to WordPress settings page',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('drupaltowordpress_admin'),
	  'access arguments' => array('administer drupaltowordpress settings'),
	  'type' => MENU_NORMAL_ITEM,
	 );
	
	// Analysis results page
	$items['d2w/results'] = array(
	  'title' => 'Drupal to WordPress',
	  'page callback' => 'drupaltowordpress_results',
	  'access arguments' => array('access drupaltowordpress content'),
	  'type' => MENU_CALLBACK,
	);
	
	// Duplicate terms page
	$items['d2w/duplicate_terms'] = array(
	  'title' => 'Duplicate terms',
	  'page callback' => 'drupaltowordpress_duplicate_terms',
	  'access arguments' => array('access drupaltowordpress content'),
	  'type' => MENU_CALLBACK,
	);	

	// Exceeded terms character length page
	$items['d2w/charlength_exceeded'] = array(
	  'title' => 'Exceeded terms character length',
	  'page callback' => 'drupaltowordpress_charlength_exceeded',
	  'access arguments' => array('access drupaltowordpress content'),
	  'type' => MENU_CALLBACK,
	);
	
	// Duplicate aliases page
	$items['d2w/duplicate_aliases'] = array(
	  'title' => 'Duplicate aliases',
	  'page callback' => 'drupaltowordpress_duplicate_aliases',
	  'access arguments' => array('access drupaltowordpress content'),
	  'type' => MENU_CALLBACK,
	);	

	return $items;
}


/**********
 * Display results of the analysis in a page
 */
function drupaltowordpress_results() {
	// content variable that will be returned for display
	$page_content = '';
	$abort = false;

	// Get terms
	$query = "SELECT DISTINCT tid, name FROM {term_data} WHERE (1);";
	$result = db_query($query);
	$terms_count = $result->num_rows;
	
	$query = "SELECT DISTINCT type, name, description FROM {node_type} n;";
	$result = db_query($query);
	$node_types_result = $result;
	$node_types_count = $result->num_rows;
	$node_types_params_list = buildListBox($node_types_result);
	
	$query = "SELECT DISTINCT nid FROM {node};";
	$result = db_query($query);
	$posts_count = $result->num_rows;

	/*
	 * Can't import duplicate terms into the WordPress wp_terms table
	 * Get aggregate of terms with duplicate names; we don't want each individual term
	 * entry with a duplicate name
	 */
	$query = "SELECT tid, name, COUNT(*) c FROM {term_data} GROUP BY name HAVING c > 1;";
	$result = db_query($query);
	$duplicate_terms_count = $result->num_rows;

	/*
	 * WordPress term name field is set 200 chars but Drupal's is term name is 255 chars
	 */
	$query = "SELECT tid, name FROM {term_data} WHERE CHAR_LENGTH(name) > 200;";
	$result = db_query($query);
	$terms_charlength_exceeded_count = $result->num_rows;
	
	/*
	 * Duplicate aliases will will cause integrity constraint violation
	 */
	$query = "SELECT pid, src, COUNT(*) c FROM {url_alias} GROUP BY src HAVING c > 1;";
	$result = db_query($query);
	$duplicate_aliases_count = $result->num_rows;
	
	
	// Build the page content
	$page_content .= "<table class=\"analysis_table\"><caption>Drupal properties</caption><thead>";
	$page_content .= "<th class=\"property\">Property</th><th class=\"found\">Found in Drupal</th></thead><tbody>";

	$page_content .= "<tr><td>Terms</td><td>$terms_count terms</td></tr>";
	$page_content .= "<tr><td>Node types</td><td>$node_types_count node types <br />".
				$node_types_params_list."</td></tr>";
	$page_content .= "<tr><td>Entries</td><td>$posts_count entries</td></tr>";
	$page_content .= "</tbody></table>";
	

	// Any potential problems? Don't show migration options
	if(!$abort)
	{
		$page_content .= "<table class=\"problems_table\"><caption id=\"problems\">Possible problems</caption><thead>";
		$page_content .= "<th class=\"problem_property\">Problem</th><th class=\"problem_found\">Description</th></thead><tbody>";

		// Duplicate terms?
		if($duplicate_terms_count > 0) {
			$page_content .= "<tr><td>Duplicate terms</td><td>$duplicate_terms_count duplicate terms. We can't import duplicate terms into WordPress. The migration will fail if these are to be included. ";
			$page_content .= l("View terms", "d2w/duplicate_terms");
			$page_content .= "</td></tr>";
			
		}
		// Exceeded terms character length?
		if($terms_charlength_exceeded_count > 0) {
			$page_content .= "<tr><td>Term character length exceeded</td><td>$terms_charlength_exceeded_count terms exceed WordPress' 200 character length. The migration will fail if these are to be included. <strong>Warning:</strong> fixing this problem will cause some data loss in the truncated columns. ";
			$page_content .= l("View terms", "d2w/charlength_exceeded");
			$page_content .= "</td></tr>";			
		}
		// Duplicate aliases?
		if($duplicate_aliases_count > 0) {
			$page_content .= "<tr><td>Duplicate aliases</td><td>$duplicate_aliases_count duplicate aliases found. Due to the way we build the WordPress post data, Drupal nodes with multiple url aliases will cause errors. ";
			$page_content .= l("View aliases", "d2w/duplicate_aliases");
			$page_content .= "</td></tr>";			
		}
		$page_content .=  "</tbody></table>";
	}
	
	if ($page_content == '') {
		$page_content = "Sorry, no content to display.";
	}

	return $page_content;
}


/**********
 * Display table of duplicate terms in a page
 */
function drupaltowordpress_duplicate_terms() {
	// content variable that will be returned for display
	$page_content = '';

	/*
	 * Can't import duplicate terms into the WordPress wp_terms table
	 * Get aggregate of terms with duplicate names; we don't want each individual term
	 * entry with a duplicate name
	 */
	$query = "SELECT tid, name, COUNT(*) c FROM {term_data} GROUP BY name HAVING c > 1;";
	$result = db_query($query);
	$duplicate_terms_count = $result->num_rows;
	
	if ($duplicate_terms_count > 0 ) {
		
		$page_content .= "<p>You have <strong>$duplicate_terms_count duplicate term names</strong>. We can't import duplicate term names into WordPress, even if Drupal stores them in different Vocabularies. The migration will fail if these are to be included.</p>";
		
		$page_content .= "<table class=\"problems_table\">
			<caption class=\"problems\">Duplicate terms</caption>
			<thead>
				<th class=\"problem_found\">tid</th>
				<th class=\"problem_found\">term name</th>
				<th class=\"problem_found\">count</th>
			</thead>
			<tbody>";

			while ($terms = db_fetch_object($result)) {
				$page_content .= "<tr><td>".$terms->tid."</td><td>".
									$terms->name."</td><td>".
									$terms->c."</td></tr>";
		    }
	
		$page_content .= "</table>";
	}
	
	if ($page_content == '') {
		$page_content = "You have no duplicate terms.";
	}

	return $page_content;
}


/**********
 * Display table of terms exceeding charlength in a page
 */
function drupaltowordpress_charlength_exceeded() {
	$page_content = '';

	$query = "SELECT tid, name FROM {term_data} WHERE CHAR_LENGTH(name) > 200;";
	$result = db_query($query);
	$terms_charlength_exceeded_count = $result->num_rows;

	if ($terms_charlength_exceeded_count > 0 ) {

		$page_content .= "<p>You have <strong>$terms_charlength_exceeded_count terms</strong> exceeding WordPress' 200 character length for term names. The migration will fail if these are to be included. <strong>Warning:</strong> fixing this problem will cause some data loss in the truncated columns. </p>";

		$page_content .= "<table class=\"problems_table\" style=\"table-layout: fixed;\">
			<caption class=\"problems\">Term character length exceeded</caption>
			<thead>
				<th class=\"problem_found\" width=\"20%\">tid</th>
				<th class=\"problem_found\"  style=\"width: 80%;\">term name</th>
			</thead>
			<tbody>";

			while ($terms = db_fetch_object($result)) {
				$page_content .= "<tr><td>".$terms->tid."</td><td style=\"word-wrap:break-word;\">".
									$terms->name."</td></tr>";
		    }

		$page_content .= "</table>";
	}

	if ($page_content == '') {
		$page_content = "You have no duplicate terms.";
	}

	return $page_content;
}


/**********
 * Display table of duplicate aliases in a page
 */
function drupaltowordpress_duplicate_aliases() {
	$page_content = '';

	$query = "SELECT pid, src, COUNT(*) c FROM {url_alias} GROUP BY src HAVING c > 1;";
	$result = db_query($query);
	$duplicate_aliases_count = $result->num_rows;

	if ($duplicate_aliases_count > 0 ) {

		$page_content .= "<p>$duplicate_aliases_count duplicate aliases found. Due to the way we build the WordPress post data, Drupal nodes with multiple url aliases will cause errors. </p>";

		$page_content .= "<table class=\"problems_table\" style=\"table-layout: fixed;\">
			<caption class=\"problems\">Duplicate aliases</caption>
			<thead>
				<th class=\"problem_found\" width=\"45%\">pid</th>
				<th class=\"problem_found\"  style=\"width: 45%;\">src</th>
				<th class=\"problem_found\"  style=\"width: 10%;\">count</th>				
			</thead>
			<tbody>";

			while ($aliases = db_fetch_object($result)) {
				$page_content .= "<tr><td>".$aliases->pid."</td><td style=\"word-wrap:break-word;\">".$aliases->src."</td><td>".
				$aliases->c."</td></tr>";
		    }

		$page_content .= "</table>";
	}

	if ($page_content == '') {
		$page_content = "You have no duplicate terms.";
	}

	return $page_content;
}


/**********
 * Builds a HTML listbox
 */
function buildListBox($params_array) {	
	// Build node types list
	$node_types_count = count($params_array);
	$listbox = "";

	$listbox = "<select name=\"sometext\" size=\"5\">";
	if ($node_types_count) { 
		foreach ($params_array as $row_key => $row_val) {
			$listbox .= "<option>".$row_val['type']."</option>";
		}
	}
	$listbox .= "</select>";
	
	return $listbox;
}
